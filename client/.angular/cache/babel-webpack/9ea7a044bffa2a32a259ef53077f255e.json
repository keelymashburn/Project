{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\keely.mashburn\\\\Documents\\\\GitHub\\\\Project\\\\client\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { HubConnectionBuilder } from '@microsoft/signalr';\nimport { BehaviorSubject } from 'rxjs';\nimport { take } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport { getPaginatedResult, getPaginationHeaders } from './paginationHelper';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./busy.service\";\nexport class MessageService {\n  constructor(http, busyService) {\n    this.http = http;\n    this.busyService = busyService;\n    this.baseUrl = environment.apiUrl;\n    this.hubUrl = environment.hubUrl;\n    this.messageThreadSource = new BehaviorSubject([]);\n    this.messageThread$ = this.messageThreadSource.asObservable();\n  }\n\n  createHubConnection(user, otherUsername) {\n    this.busyService.busy();\n    this.hubConnection = new HubConnectionBuilder().withUrl(this.hubUrl + 'message?user=' + otherUsername, {\n      accessTokenFactory: () => user.token\n    }).withAutomaticReconnect().build();\n    this.hubConnection.start().catch(error => console.log(error)).finally(() => this.busyService.idle());\n    this.hubConnection.on('RecieveMessageThread', messages => {\n      this.messageThreadSource.next(messages);\n    });\n    this.hubConnection.on('NewMessage', message => {\n      this.messageThread$.pipe(take(1)).subscribe(messages => {\n        this.messageThreadSource.next([...messages, message]);\n      });\n    });\n    this.hubConnection.on('UpdatedGroup', group => {\n      if (group.connections.some(x => x.username === otherUsername)) {\n        this.messageThread$.pipe(take(1)).subscribe(messages => {\n          messages.forEach(message => {\n            if (!message.dateRead) {\n              message.dateRead = new Date(Date.now());\n            }\n          });\n          this.messageThreadSource.next([...messages]);\n        });\n      }\n    });\n  }\n\n  stopHubConnection() {\n    if (this.hubConnection) {\n      this.messageThreadSource.next([]);\n      this.hubConnection.stop();\n    }\n  }\n\n  getMessages(pageNumber, pageSize, container) {\n    let params = getPaginationHeaders(pageNumber, pageSize);\n    params = params.append('Container', container);\n    return getPaginatedResult(this.baseUrl + 'messages', params, this.http);\n  }\n\n  getMessageThread(username) {\n    return this.http.get(this.baseUrl + 'messages/thread/' + username);\n  }\n\n  sendMessage(username, content) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      return _this.hubConnection.invoke('SendMessage', {\n        recipientUsername: username,\n        content\n      }).catch(error => console.log(error));\n    })();\n  }\n\n  deleteMessage(id) {\n    return this.http.delete(this.baseUrl + 'messages/' + id);\n  }\n\n}\n\nMessageService.ɵfac = function MessageService_Factory(t) {\n  return new (t || MessageService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.BusyService));\n};\n\nMessageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MessageService,\n  factory: MessageService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/Users/keely.mashburn/Documents/GitHub/Project/client/src/app/_services/message.service.ts"],"names":["HubConnectionBuilder","BehaviorSubject","take","environment","getPaginatedResult","getPaginationHeaders","i0","i1","i2","MessageService","constructor","http","busyService","baseUrl","apiUrl","hubUrl","messageThreadSource","messageThread$","asObservable","createHubConnection","user","otherUsername","busy","hubConnection","withUrl","accessTokenFactory","token","withAutomaticReconnect","build","start","catch","error","console","log","finally","idle","on","messages","next","message","pipe","subscribe","group","connections","some","x","username","forEach","dateRead","Date","now","stopHubConnection","stop","getMessages","pageNumber","pageSize","container","params","append","getMessageThread","get","sendMessage","content","invoke","recipientUsername","deleteMessage","id","delete","ɵfac","MessageService_Factory","t","ɵɵinject","HttpClient","BusyService","ɵprov","ɵɵdefineInjectable","factory","providedIn"],"mappings":"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","sourcesContent":["import { HubConnectionBuilder } from '@microsoft/signalr';\r\nimport { BehaviorSubject } from 'rxjs';\r\nimport { take } from 'rxjs/operators';\r\nimport { environment } from 'src/environments/environment';\r\nimport { getPaginatedResult, getPaginationHeaders } from './paginationHelper';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"./busy.service\";\r\nexport class MessageService {\r\n    constructor(http, busyService) {\r\n        this.http = http;\r\n        this.busyService = busyService;\r\n        this.baseUrl = environment.apiUrl;\r\n        this.hubUrl = environment.hubUrl;\r\n        this.messageThreadSource = new BehaviorSubject([]);\r\n        this.messageThread$ = this.messageThreadSource.asObservable();\r\n    }\r\n    createHubConnection(user, otherUsername) {\r\n        this.busyService.busy();\r\n        this.hubConnection = new HubConnectionBuilder()\r\n            .withUrl(this.hubUrl + 'message?user=' + otherUsername, {\r\n            accessTokenFactory: () => user.token\r\n        })\r\n            .withAutomaticReconnect()\r\n            .build();\r\n        this.hubConnection.start()\r\n            .catch(error => console.log(error))\r\n            .finally(() => this.busyService.idle());\r\n        this.hubConnection.on('RecieveMessageThread', messages => {\r\n            this.messageThreadSource.next(messages);\r\n        });\r\n        this.hubConnection.on('NewMessage', message => {\r\n            this.messageThread$.pipe(take(1)).subscribe(messages => {\r\n                this.messageThreadSource.next([...messages, message]);\r\n            });\r\n        });\r\n        this.hubConnection.on('UpdatedGroup', (group) => {\r\n            if (group.connections.some(x => x.username === otherUsername)) {\r\n                this.messageThread$.pipe(take(1)).subscribe(messages => {\r\n                    messages.forEach(message => {\r\n                        if (!message.dateRead) {\r\n                            message.dateRead = new Date(Date.now());\r\n                        }\r\n                    });\r\n                    this.messageThreadSource.next([...messages]);\r\n                });\r\n            }\r\n        });\r\n    }\r\n    stopHubConnection() {\r\n        if (this.hubConnection) {\r\n            this.messageThreadSource.next([]);\r\n            this.hubConnection.stop();\r\n        }\r\n    }\r\n    getMessages(pageNumber, pageSize, container) {\r\n        let params = getPaginationHeaders(pageNumber, pageSize);\r\n        params = params.append('Container', container);\r\n        return getPaginatedResult(this.baseUrl + 'messages', params, this.http);\r\n    }\r\n    getMessageThread(username) {\r\n        return this.http.get(this.baseUrl + 'messages/thread/' + username);\r\n    }\r\n    async sendMessage(username, content) {\r\n        return this.hubConnection.invoke('SendMessage', { recipientUsername: username, content })\r\n            .catch(error => console.log(error));\r\n    }\r\n    deleteMessage(id) {\r\n        return this.http.delete(this.baseUrl + 'messages/' + id);\r\n    }\r\n}\r\nMessageService.ɵfac = function MessageService_Factory(t) { return new (t || MessageService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.BusyService)); };\r\nMessageService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: MessageService, factory: MessageService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}